{"ast":null,"code":"const link = \"https://rickandmortyapi.com/api/episod\";\nexport const getEpisodes = function () {\n  let noPage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  return fetch(link + `?page=${noPage}`, {\n    method: \"GET\"\n  }).then(response => {\n    if (!response.ok) {\n      Promise.reject(new Error(\"Could not get Episodes!\"));\n    }\n\n    return response.json();\n  }).then(data => {\n    return [data[\"results\"], data[\"info\"][\"pages\"]];\n  });\n};\nexport const getCharactersPerEpisode = episodeId => {\n  return fetch(link + `?episode=${episodeId}`, {\n    method: \"GET\"\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(\"Could not get Characters!\");\n    }\n\n    return response.json();\n  }).then(data => {\n    return data[\"results\"][0][\"characters\"];\n  });\n};\nexport const getCharacter = link => {\n  return fetch(link, {\n    method: \"GET\"\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(\"Could not get Character!\");\n    }\n\n    return response.json();\n  }).then(data => {\n    return data;\n  });\n};","map":{"version":3,"names":["link","getEpisodes","noPage","fetch","method","then","response","ok","Promise","reject","Error","json","data","getCharactersPerEpisode","episodeId","getCharacter"],"sources":["D:/Curs-Scoala informala de IT/week14_homework_Rick and Morty API-React - useContext/src/lib/httpRequests.js"],"sourcesContent":["const link = \"https://rickandmortyapi.com/api/episod\";\r\n\r\nexport const getEpisodes = (noPage = 1) => {\r\n  return fetch(link + `?page=${noPage}`, {\r\n    method: \"GET\",\r\n  })\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        Promise.reject( new Error(\"Could not get Episodes!\"));\r\n      }\r\n      return response.json();\r\n    })\r\n    .then((data) => {\r\n      return [data[\"results\"], data[\"info\"][\"pages\"]];\r\n    });\r\n};\r\n\r\nexport const getCharactersPerEpisode = (episodeId) => {\r\n  return fetch(link + `?episode=${episodeId}`, {\r\n    method: \"GET\",\r\n  })\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        throw new Error(\"Could not get Characters!\");\r\n      }\r\n      return response.json();\r\n    })\r\n    .then((data) => {\r\n      return data[\"results\"][0][\"characters\"];\r\n    });\r\n};\r\n\r\nexport const getCharacter = (link) => {\r\n  return fetch(link, {\r\n    method: \"GET\",\r\n  })\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        throw new Error(\"Could not get Character!\");\r\n      }\r\n      return response.json();\r\n    })\r\n    .then((data) => {\r\n      return data;\r\n    });\r\n};\r\n"],"mappings":"AAAA,MAAMA,IAAI,GAAG,wCAAb;AAEA,OAAO,MAAMC,WAAW,GAAG,YAAgB;EAAA,IAAfC,MAAe,uEAAN,CAAM;EACzC,OAAOC,KAAK,CAACH,IAAI,GAAI,SAAQE,MAAO,EAAxB,EAA2B;IACrCE,MAAM,EAAE;EAD6B,CAA3B,CAAL,CAGJC,IAHI,CAGEC,QAAD,IAAc;IAClB,IAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;MAChBC,OAAO,CAACC,MAAR,CAAgB,IAAIC,KAAJ,CAAU,yBAAV,CAAhB;IACD;;IACD,OAAOJ,QAAQ,CAACK,IAAT,EAAP;EACD,CARI,EASJN,IATI,CASEO,IAAD,IAAU;IACd,OAAO,CAACA,IAAI,CAAC,SAAD,CAAL,EAAkBA,IAAI,CAAC,MAAD,CAAJ,CAAa,OAAb,CAAlB,CAAP;EACD,CAXI,CAAP;AAYD,CAbM;AAeP,OAAO,MAAMC,uBAAuB,GAAIC,SAAD,IAAe;EACpD,OAAOX,KAAK,CAACH,IAAI,GAAI,YAAWc,SAAU,EAA9B,EAAiC;IAC3CV,MAAM,EAAE;EADmC,CAAjC,CAAL,CAGJC,IAHI,CAGEC,QAAD,IAAc;IAClB,IAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;MAChB,MAAM,IAAIG,KAAJ,CAAU,2BAAV,CAAN;IACD;;IACD,OAAOJ,QAAQ,CAACK,IAAT,EAAP;EACD,CARI,EASJN,IATI,CASEO,IAAD,IAAU;IACd,OAAOA,IAAI,CAAC,SAAD,CAAJ,CAAgB,CAAhB,EAAmB,YAAnB,CAAP;EACD,CAXI,CAAP;AAYD,CAbM;AAeP,OAAO,MAAMG,YAAY,GAAIf,IAAD,IAAU;EACpC,OAAOG,KAAK,CAACH,IAAD,EAAO;IACjBI,MAAM,EAAE;EADS,CAAP,CAAL,CAGJC,IAHI,CAGEC,QAAD,IAAc;IAClB,IAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;MAChB,MAAM,IAAIG,KAAJ,CAAU,0BAAV,CAAN;IACD;;IACD,OAAOJ,QAAQ,CAACK,IAAT,EAAP;EACD,CARI,EASJN,IATI,CASEO,IAAD,IAAU;IACd,OAAOA,IAAP;EACD,CAXI,CAAP;AAYD,CAbM"},"metadata":{},"sourceType":"module"}